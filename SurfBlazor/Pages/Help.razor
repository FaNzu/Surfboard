@using SurfBlazorLibrary.Help.Models
@using Microsoft.AspNetCore.SignalR.Client
@page "/help"
@inject NavigationManager navigationManager
@implements IAsyncDisposable
<section>
    <h1>Help</h1>
    <p>If you have any questions, please add them to our live chat</p>
    @if (Messages?.Any() ?? false)
    {
        <ul>
            @foreach (var message in Messages)
            {
                <li class="@message.ClassName">@message.Message</li>
            }
        </ul>
    }
    <form>
        <input @bind-value="Message" />
        <button class="btn-success" type="button" @onclick="SendMessageAsync">Send message</button>
    </form>
</section>

@code {
    private string? Message { get; set; }

    private List<LiveChatMessage>? Messages { get; set; }

    private HubConnection? hubConnection;
}
@functions {
    protected override async Task OnInitializedAsync()
    {
        Messages = new List<LiveChatMessage>();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("https://localhost:7163/live-chat"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            Messages.Add(new LiveChatMessage(message, LiveChatTypeEnum.RECEIVED));
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await base.OnInitializedAsync();
    }

    private async Task SendMessageAsync()
    {
        if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendMessageAsync", Message);
            Messages.Add(new LiveChatMessage(Message, LiveChatTypeEnum.SENT));

            Message = string.Empty;

        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
